version: "3.8"

services:
  # Portal Shell (Open-WebUI fork)
  webui:
    image: ghcr.io/open-webui/open-webui:0.6.5
    ports:
      - "3000:8080"
    env_file: .env
    depends_on:
      - backend
    volumes:
      - ./webui/plugins:/app/plugins
      - ./webui/overrides:/app/overrides

  # Backend BFF
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      - mariadb
      - chromadb
      - redis
      - minio
      - langgraph
      - litellm
      - langfuse
      - helicone
      - kong

  # Agent Runtime
  langgraph:
    image: yourorg/langgraph-server:latest
    ports:
      - "8123:8123"

  # LLM Gateway
  litellm:
    image: ghcr.io/berriai/litellm:main
    command: ["--config", "/app/config.yaml"]
    volumes:
      - "./config/litellm.yaml:/app/config.yaml"
    ports:
      - "4000:4000"

  # Observability
  langfuse:
    image: langfuse/langfuse:latest
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@langfuse-db:5432/postgres
    depends_on:
      - langfuse-db

  langfuse-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - langfuse_db:/var/lib/postgresql/data

  helicone:
    image: helicone/helicone:latest
    ports:
      - "8787:8787"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@helicone-db:5432/postgres
    depends_on:
      - helicone-db

  helicone-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - helicone_db:/var/lib/postgresql/data

  # Kong Database (Postgres)
  kong-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=kong
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kongpass
    volumes:
      - kong_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Migrations (1회 실행)
  kong-migrations:
    image: kong:3.6
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
    command: ["kong", "migrations", "bootstrap"]
    restart: "no"

  # Kong Gateway (Postgres 모드)
  kong:
    image: kong:3.6
    depends_on:
      - kong-db
      - kong-migrations
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PLUGINS=prometheus
    ports:
      - "8002:8000"    # Proxy (외부 포트 변경으로 충돌 방지)
      - "8443:8443"    # Proxy TLS
      # Admin API(8001)는 외부 노출 안 함 - BFF 프록시로만 접근
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s

  # Konga Database (Postgres)
  konga-db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=konga
      - POSTGRES_USER=konga
      - POSTGRES_PASSWORD=kongapass
    volumes:
      - konga_db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U konga"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Konga (Kong Admin UI)
  # Konga (Kong Admin UI)
  konga:
    image: pantsel/konga:latest
    platform: linux/amd64
    depends_on:
      konga-db:
        condition: service_healthy
      kong:
        condition: service_healthy
    environment:
      - DB_ADAPTER=postgres
      - DB_HOST=konga-db
      - DB_USER=konga
      - DB_PASSWORD=kongapass
      - DB_DATABASE=konga
      - NODE_ENV=production
    # 외부 포트는 공개하지 않고 BFF 프록시로만 접근
    # ports: ["1337:1337"]

  # Data Layer
  mariadb:
    image: mariadb:11
    environment:
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
      - MARIADB_DATABASE=${MARIADB_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - mariadb:/var/lib/mysql

  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    ports:
      - "8001:8000"

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redis:/data

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio:/data

  # 추가 포털
  open-notebook:
    build: ./open-notebook
    ports:
      - "3100:3000"
    env_file: .env
    depends_on:
      - litellm

  perplexica:
    build: ./perplexica
    ports:
      - "3210:3000"
    env_file: .env
    depends_on:
      - litellm

volumes:
  mariadb:
  chromadb:
  redis:
  minio:
  langfuse_db:
  helicone_db:
  kong_db:
  konga_db:
